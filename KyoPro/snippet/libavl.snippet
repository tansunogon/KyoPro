<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>libavl</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>libavl</Shortcut>
    </Header>
    <Snippet>
      <Code Language="cpp" Delimiter="$"><![CDATA[// AVL Tree
//
// AVL Tree can solve the following problems:
//     Assume that for each element in an infinite sequence is
//     the identity value IDENT:
//             For all k, A[k] = IDENT (k: index or key)
//         For Example, if you are considering numbers and add operation,
//         the identity element is 0. So,
//             For all k, A[k] = 0     (k: index or key)
//     Process queries of the followings.
//         1. Replace value V at K
//            input: K, V
//            effect: A[K] = V
//         2. Apply binary operation at K with value V
//            input: K, V
//            effect: A[K] = A[K] Op V
//            For example, if Op = add, then apply
//                A[K] += V
//         3. Calculate range value
//            input: L, R
//            output: Op_{L<=k<=R} A[k]
//            For example, if Op = add, then calculate
//                sum_{L<=k<=R} A[k]
//         4. Search minimum range
//            input: L, function F: value -> {true, false}
//                   Function F should have the following property:
//                       For all p, q. L < p < q.
//                           F(Op_{L<=k<=q} A[k]) => F(Op_{L<=k<=p} A[k])
//            output: minimum r, where F(Op_{L<=k<=r} A[k])
//            For example, if Op = add and F(v)=(10<=v), then search
//                minimum r, where 10 <= sum_{L<=k<=r} A[k]
//
// Segment Tree can solve the same problems,
// but AVL tree has the advantage that there is no need to compress coordinates.
//
// Implemented by tansu
struct EmptyExtraNodeInfo {
	template <class Key, class AlterInfo>
	EmptyExtraNodeInfo(Key l_key, Key r_key, AlterInfo alter_info) {}
};
template <class Key, class AlterInfo>
struct ExtraNodeInfoForLazy {
	Key leftmost_key;
	Key rightmost_key;
	AlterInfo alter_info;
	ExtraNodeInfoForLazy(Key l_key, Key r_key, AlterInfo alter_info) :
		leftmost_key(l_key),
		rightmost_key(r_key),
		alter_info(alter_info)
	{
	}
};
template <class Key, class Monoid, class IDENT, class Op, bool LAZY, class AlterInfo, class AIDENT, class MAOp, class AAOp>
struct AVLTreeNode {
	AVLTreeNode *left;
	AVLTreeNode *right;
	Key key;
	Monoid value;
	Monoid sum_of_value;
	int rank;
	using LazyInfo = typename conditional<LAZY, ExtraNodeInfoForLazy<Key, AlterInfo>, EmptyExtraNodeInfo>::type;
	LazyInfo lazy_info;
	AVLTreeNode(Key key, Monoid value) :
		left(nullptr),
		right(nullptr),
		key(key),
		value(value),
		sum_of_value(value),
		rank(1),
		lazy_info(key, key, AIDENT())
	{
	}
	~AVLTreeNode() { delete left; delete right; }
	template <bool REVERSE = false>
	AVLTreeNode *get_left() const { return !REVERSE ? left : right; }
	template <bool REVERSE = false>
	AVLTreeNode *get_right() const { return !REVERSE ? right : left; }
	template <bool REVERSE = false>
	bool less_than(Key key) const { return !REVERSE ? (this->key < key) : (this->key > key); }
	template <bool REVERSE = false>
	bool greater_than(Key key) const { return !REVERSE ? (this->key > key) : (this->key < key); }
	// returns: Op_{k} A[k]
	Monoid sum()
	{
		propagete_alter_info();
		return sum_of_value;
	}
	// returns: Op_{k<=key} A[k]
	template <bool REVERSE = false>
	Monoid lower_sum(Key key)
	{
		Monoid s = IDENT();
		AVLTreeNode *node = this;
		while (node) {
			node->propagete_alter_info();
			if (!(key < node->key) && !(node->key < key)) {
				s = Op()(s, node->get_left<REVERSE>() ? node->get_left<REVERSE>()->sum() : IDENT());
				s = Op()(s, node->value);
				break;
			} else if (node->greater_than<REVERSE>(key)) {
				node = node->get_left<REVERSE>();
			} else {
				s = Op()(s, node->get_left<REVERSE>() ? node->get_left<REVERSE>()->sum() : IDENT());
				s = Op()(s, node->value);
				node = node->get_right<REVERSE>();
			}
		}
		return s;
	}
	// returns: Op_{key<=k} A[k]
	Monoid upper_sum(Key key)
	{
		return lower_sum<true>(key);
	}
	// returns: Op_{l_key<=key<=r_key} A[k]
	Monoid range_sum(Key l_key, Key r_key)
	{
		AVLTreeNode *node = this;
		while (node) {
			node->propagete_alter_info();
			if (node->key < l_key) {
				node = node->right;
			} else if (!(l_key < node->key)) { // node->key == l_key
				Monoid s = node->value;
				return Op()(s, node->right ? node->right->lower_sum(r_key) : IDENT());
			} else if (node->key < r_key) { // l_key < node->key < r_key
				Monoid s = node->value;
				s = Op()(s, node->left ? node->left->upper_sum(l_key) : IDENT());
				s = Op()(s, node->right ? node->right->lower_sum(r_key) : IDENT());
				return s;
			} else if (!(r_key < node->key)) { // node->key == r_key
				Monoid s = node->value;
				return Op()(s, node->left ? node->left->upper_sum(l_key) : IDENT());
			} else { // r_key < node->key
				node = node->left;
			}
		}
		return IDENT();
	}
	// search the node whose key is key
	// returns: node pointer
	// if REVERSE = false and there is no node whose key is key, then returns the nearest greater node.
	// if REVERSE = true  and there is no node whose key is key, then returns the nearest lesser node.
	// push_back parent nodes to trace
	template <bool REVERSE = false>
	AVLTreeNode *search(Key key, vector<AVLTreeNode *> *trace = nullptr)
	{
		AVLTreeNode *node = this;
		while (node) {
			node->propagete_alter_info();
			if (!(key < node->key) && !(node->key < key)) {
				return node;
			} else if (key < node->key) {
				if (!node->left && !REVERSE) {
					return node;
				}
				if (trace) {
					trace->push_back(node);
				}
				node = node->left;
			} else {
				if (!node->right && REVERSE) {
					return node;
				}
				if (trace) {
					trace->push_back(node);
				}
				node = node->right;
			}
		}
		return nullptr;
	}
	template <bool REVERSE = false>
	AVLTreeNode *upper_parent(vector<AVLTreeNode *> *trace) const
	{
		while (!trace->empty() && !(this->less_than<REVERSE>(trace->back()->key))) {
			trace->pop_back();
		}
		if (trace->empty()) {
			return nullptr;
		}
		return trace->back();
	}
	template <bool REVERSE = false>
	AVLTreeNode *rightmost(vector<AVLTreeNode *> *trace = nullptr)
	{
		AVLTreeNode *node = this;
		while (node->get_right<REVERSE>()) {
			if (trace) {
				trace->push_back(node);
			}
			node = node->get_right<REVERSE>();
			node->propagete_alter_info();
		}
		return node;
	}
	template <bool REVERSE = false>
	AVLTreeNode *leftmost(vector<AVLTreeNode *> *trace = nullptr)
	{
		return rightmost<!REVERSE>(trace);
	}
	template <bool REVERSE = false>
	const Key *min_range(Key l_key, function<bool(Monoid)> f)
	{
		vector<AVLTreeNode *> trace;
		trace.reserve((size_t)this->rank + 5);
		AVLTreeNode *node = search<REVERSE>(l_key, &trace);
		if (!node || !f(node->value)) {
			return nullptr;
		}
		Monoid s = node->value;
		while (true) {
			// now, f(Op_{l_key<=k<=node->key} A[k]) = true
			if (!node->get_right<REVERSE>()) {
				const AVLTreeNode *parent = node->upper_parent<REVERSE>(&trace);
				if (!parent || !f(Op()(s, parent->value))) {
					return &node->key;
				} else {
					s = Op()(s, parent->value);
					node = parent;
				}
			} else {
				if (f(Op()(s, node->get_right<REVERSE>()->sum()))) {
					s = f(Op()(s, node->get_right<REVERSE>()->sum()));
					const AVLTreeNode *parent = node->upper_parent<REVERSE>(&trace);
					if (!parent || !f(Op()(s, parent->value))) {
						return &node->rightmost<REVERSE>()->key;
					} else {
						s = Op()(s, parent->value);
						node = parent;
					}
				} else {
					const AVLTreeNode *next = node->get_right<REVERSE>()->template leftmost<REVERSE>(&trace);
					if (!f(Op()(s, next->value))) {
						return &node->key;
					} else {
						s = Op()(s, next->value);
						node = next;
					}
				}
			}
		}
	}
	const Key *min_range_r(Key r_key, function<bool(Monoid)> f)
	{
		return min_range<true>(r_key, f);
	}
	// alter (modify or insert)
	// effect: A[key] = AlterOp()(A[key], ...)
	// returns: node pointer
	template <class AlterOp, class ...Args>
	AVLTreeNode *alter(Key key, Args ...args)
	{
		propagete_alter_info();
		AVLTreeNode *ret;
		if (!(key < this->key) && !(this->key < key)) {
			this->value = AlterOp()(this->value, args...);
			update_sum();
			return this;
		} else if (key < this->key) {
			if (this->left) {
				ret = this->left->template alter<AlterOp>(key, args...);
			} else {
				ret = this->left = new AVLTreeNode(key, AlterOp()(IDENT(), args...));
			}
		} else {
			if (this->right) {
				ret = this->right->template alter<AlterOp>(key, args...);
			} else {
				ret = this->right = new AVLTreeNode(key, AlterOp()(IDENT(), args...));
			}
		}
		update_sum();
		update_leftmost_rightmost();

		int l_rank = left ? left->rank : 0;
		int r_rank = right ? right->rank : 0;
		this->rank = max(l_rank, r_rank) + 1;

		if (l_rank > r_rank + 1) {
			rotate_l();
		} else if (r_rank > l_rank + 1) {
			rotate_r();
		}

		return ret;
	}
	void update_sum()
	{
		Monoid l_sum = left ? left->sum() : IDENT();
		Monoid r_sum = right ? right->sum() : IDENT();
		sum_of_value = Op()(Op()(value, l_sum), r_sum);
	}
	void update_rank()
	{
		int l_rank = left ? left->rank : 0;
		int r_rank = right ? right->rank : 0;
		rank = max(l_rank, r_rank) + 1;
	}
	void update_leftmost_rightmost()
	{
		if constexpr (LAZY) {
			if (this->left) {
				this->lazy_info.leftmost_key = this->left->lazy_info.leftmost_key;
			} else {
				this->lazy_info.leftmost_key = this->key;
			}
			if (this->right) {
				this->lazy_info.rightmost_key = this->right->lazy_info.rightmost_key;
			} else {
				this->lazy_info.rightmost_key = this->key;
			}
		}
	}
	// left => new root
	void rotate_l()
	{
		AVLTreeNode *ll = this->left->left;
		AVLTreeNode *lr = this->left->right;
		AVLTreeNode *r = this->right;

		AVLTreeNode *root = this;
		AVLTreeNode *node = this->left;
		root->left = ll;
		root->right = node;
		node->left = lr;
		node->right = r;
		swap(root->key, node->key);
		swap(root->value, node->value);
		node->update_sum();
		node->update_leftmost_rightmost();
		node->update_rank();
		root->update_sum();
		root->update_leftmost_rightmost();
		root->update_rank();
	}
	// right => new root
	void rotate_r()
	{
		AVLTreeNode *rl = this->right->left;
		AVLTreeNode *rr = this->right->right;
		AVLTreeNode *l = this->left;

		AVLTreeNode *root = this;
		AVLTreeNode *node = this->right;
		root->left = node;
		root->right = rr;
		node->left = l;
		node->right = rl;
		swap(root->key, node->key);
		swap(root->value, node->value);
		node->update_sum();
		node->update_leftmost_rightmost();
		node->update_rank();
		root->update_sum();
		root->update_leftmost_rightmost();
		root->update_rank();
	}
	void propagete_alter_info()
	{
		if constexpr (LAZY) {
			if (this->lazy_info.alter_info == AIDENT()) {
				return;
			}
			if (this->left) {
				this->left->lazy_info.alter_info
					= AAOp()(this->left->lazy_info.alter_info, this->lazy_info.alter_info);
			}
			if (this->right) {
				this->right->lazy_info.alter_info
					= AAOp()(this->right->lazy_info.alter_info, this->lazy_info.alter_info);
			}
			this->value = MAOp()(this->value, this->lazy_info.alter_info);
			this->lazy_info.alter_info = AIDENT();
		}
	}
	void alter_range(Key l_key, Key r_key, const AlterInfo &alter_info)
	{
		static_assert(LAZY, "To use modify_range(), you should complile with LAZY = true");
		if (r_key < this->lazy_info.leftmost_key || this->lazy_info.rightmost_key < l_key) {
			return;
		}
		propagete_alter_info();
		if (!(this->lazy_info.leftmost_key < l_key) && !(r_key < this->lazy_info.rightmost_key)) {
			this->lazy_info.alter_info = alter_info;
			propagete_alter_info();
		} else {
			if (!(this->key < l_key) && !(r_key < this->key)) {
				this->value = MAOp()(this->value, alter_info);
			}
			if (this->left) {
				this->left->alter_range(l_key, r_key, alter_info);
			}
			if (this->right) {
				this->right->alter_range(l_key, r_key, alter_info);
			}
			update_sum();
		}
	}
};
template <class Key, class Monoid, class IDENT, class Op, bool LAZY, class AlterInfo, class AIDENT, class MAOp, class AAOp>
struct AVLTreeIterator {
	using Node = AVLTreeNode<Key, Monoid, IDENT, Op, LAZY, AlterInfo, AIDENT, MAOp, AAOp>;
	vector<Node *> stack;
	AVLTreeIterator(Node *node)
	{
		while (node) {
			stack.push_back(node);
			node->propagete_alter_info();
			node = node->left;
		}
	}
	AVLTreeIterator &operator++()
	{
		auto node = stack.back();
		if (node->right) {
			node = node->right;
			while (node) {
				stack.push_back(node);
				node->propagete_alter_info();
				node = node->left;
			}
			return *this;
		}
		stack.pop_back();
		while (!stack.empty() && stack.back() != nullptr && stack.back()->right == node) {
			node = stack.back();
			stack.pop_back();
		}
		return *this;
	}
	bool operator==(const AVLTreeIterator &rhs) const
	{
		return (stack.empty() && rhs.stack.empty())
			|| (stack.size() == rhs.stack.size() && stack.back() == rhs.stack.back());
	}
	bool operator!=(const AVLTreeIterator &rhs) const
	{
		return !operator==(rhs);
	}
	Node *operator->() const
	{
		return stack.back();
	}
	pair<Key, Monoid> operator*() const
	{
		return make_pair(stack.back()->key, stack.back()->value);
	}
};
template <class Key = int, class Monoid = int, class IDENT = Monoid, class Op = plus<Monoid>, bool LAZY = false, class AlterInfo = int, class AIDENT = AlterInfo, class MAOp = Op, class AAOp = Op>
struct AVLTree {
	using Node = AVLTreeNode<Key, Monoid, IDENT, Op, LAZY, AlterInfo, AIDENT, MAOp, AAOp>;
	using iterator = AVLTreeIterator<Key, Monoid, IDENT, Op, LAZY, AlterInfo, AIDENT, MAOp, AAOp>;
	Node *root;
	AVLTree() : root(nullptr) {}
	~AVLTree() { delete root; }
	template <class AlterOp, class ...Args>
	Node *alter(Key key, Args ...args)
	{
		if (root) {
			return root->template alter<AlterOp>(key, args...);
		} else {
			root = new Node(key, AlterOp()(IDENT(), args...));
			return root;
		}
	}
	// effect: A[key] = value
	// returns: node pointer
	Node *replace(Key key, Monoid value)
	{
		struct ReplaceOp {
			Monoid operator()([[maybe_unused]] Monoid v_old, Monoid v_new)
			{
				return v_new;
			}
		};
		return alter<ReplaceOp, Monoid>(key, value);
	}
	// effect: A[key] = Op(A[key], value)
	// returns: node pointer
	Node *apply_op(Key key, Monoid value)
	{
		return alter<Op, Monoid>(key, value);
	}
	// effect: A[key] = IDENT()
	// returns: node pointer
	Node *erase(Key key, Monoid value)
	{
		if (root) {
			return root->replace(key, IDENT());
		} else {
			return nullptr;
		}
	}
	// returns: Op_{k} A[k]
	Monoid sum() const
	{
		return root ? root->sum() : IDENT();
	}
	// returns: Op_{k<=key} A[k]
	Monoid lower_sum(Key key) const
	{
		return root ? root->lower_sum(key) : IDENT();
	}
	// returns: Op_{key<=k} A[k]
	Monoid upper_sum(Key key) const
	{
		return root ? root->upper_sum(key) : IDENT();
	}
	// returns: Op_{l_key<=key<=r_key} A[k]
	Monoid range_sum(Key l_key, Key r_key) const
	{
		return root ? root->range_sum(l_key, r_key) : IDENT();
	}
	const Key *min_range(Key l_key, function<bool(Monoid)> f) const
	{
		return root ? root->min_range(l_key, f) : nullptr;
	}
	const Key *min_range_r(Key r_key, function<bool(Monoid)> f) const
	{
		return root ? root->min_range_r(r_key, f) : nullptr;
	}
	iterator begin() const
	{
		return iterator(root);
	}
	iterator end() const
	{
		return iterator(nullptr);
	}
	void alter_range(Key l_key, Key r_key, const AlterInfo &alter_info)
	{
		if (root) {
			root->alter_range(l_key, r_key, alter_info);
		}
	}
};
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>