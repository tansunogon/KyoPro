<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>libgcd</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>libgcd</Shortcut>
    </Header>
    <Snippet>
      <Code Language="cpp" Delimiter="$"><![CDATA[// Fast GCD Transformation / Convolution
// (添え字 GCD 畳み込み in Japanese)
//
// Fast GCD Transformation can solve the following problem:
//     input: vector A, B
//     output: vector C, where
//                 C[n] = sum_{gcd(i, j)=n} A[i]B[j]
//
// This code from
// https://qiita.com/drken/items/3beb679e54266f20ab63
// by drken
namespace gcd {
	using namespace std;

	// エラトステネスの篩
	vector<bool> Eratosthenes(int N)
	{
		vector<bool> isprime((size_t)N + 1, true);
		isprime[1] = false;
		for (int p = 2; p <= N; ++p) {
			if (!isprime[p]) continue;
			for (int q = p * 2; q <= N; q += p) {
				isprime[q] = false;
			}
		}
		return isprime;
	}

	// 高速ゼータ変換
	template<class T> void fast_zeta(vector<T> &f)
	{
		int N = (int)f.size();
		vector<bool> isprime = Eratosthenes(N);
		for (int p = 2; p < N; ++p) {
			if (!isprime[p]) continue;
			for (int k = (N - 1) / p; k >= 1; --k) {
				f[k] += f[(size_t)k * p];
			}
		}
	}

	// 高速メビウス変換
	template<class T> void fast_mobius(vector<T> &F)
	{
		int N = (int)F.size();
		vector<bool> isprime = Eratosthenes(N);
		for (int p = 2; p < N; ++p) {
			if (!isprime[p]) continue;
			for (int k = 1; k * p < N; ++k) {
				F[k] -= F[(size_t)k * p];
			}
		}
	}

	// 添字 GCD 畳み込み
	template<class T> vector<T> conv(const vector<T> &f, const vector<T> &g)
	{
		int N = (int)max(f.size(), g.size());
		vector<T> F(N, 0), G(N, 0), H(N);
		for (int i = 0; i < (int)f.size(); ++i) F[i] = f[i];
		for (int i = 0; i < (int)g.size(); ++i) G[i] = g[i];

		// 高速ゼータ変換
		fast_zeta(F);
		fast_zeta(G);

		// H を求める
		for (int i = 1; i < N; ++i) H[i] = F[i] * G[i];

		// 高速メビウス変換
		fast_mobius(H);

		return H;
	}
}
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>