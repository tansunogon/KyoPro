<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>libslidemin</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>libslidemin</Shortcut>
    </Header>
    <Snippet>
      <Code Language="cpp" Delimiter="$"><![CDATA[namespace slidemin {
	template<typename T, class Compare = less<T>>
	struct SlideMin {
		size_t k;
		Compare cmp;
		size_t count = 0;
		deque<pair<size_t, T>> q;
		SlideMin(size_t k) : SlideMin(k, less<T>{}) {}
		SlideMin(size_t k, Compare c) : k(k), cmp(c) { assert(k > 0); }
		T add(T v)
		{
			while (!q.empty() && !cmp(q.back().second, v)) {
				q.pop_back();
			}
			q.emplace_back(count, v);
			return forward();
		}
		T forward()
		{
			count++;
			if (q.front().first + k < count) {
				q.pop_front();
			}
			return q.front().second;
		}
	};

	// ret[i] = min {v[i], v[i+1], ......, v[i+k-1]}
	// ...
	// ret[-2] = min {v[-2], v[-1]} (k >= 2), v[-2] (k == 1)
	// ret[-1] = v[-1]
	// ret.size() == v.size()
	template<typename T>
	vector<T> convert(const vector<T> &v, size_t k)
	{
		assert(v.size() >= k && k > 0);
		vector<T> ret(v.size());
		SlideMin<T> smin(k);
		for (size_t i = 0; i < k - 1; ++i) {
			smin.add(v[i]);
		}
		for (size_t i = 0; i < v.size() - k + 1; ++i) {
			ret[i] = smin.add(v[i + k - 1]);
		}
		for (size_t i = v.size() - k + 1; i < v.size(); ++i) {
			ret[i] = smin.forward();
		}
		return ret;
	}
}
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>