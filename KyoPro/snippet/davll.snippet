<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>davll</Title>
      <Author>
      </Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>davll</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>int</ID>
          <ToolTip>int</ToolTip>
          <Default>int</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>bool</ID>
          <ToolTip>bool</ToolTip>
          <Default>bool</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>0</ID>
          <ToolTip>0</ToolTip>
          <Default>0</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>plus</ID>
          <ToolTip>plus</ToolTip>
          <Default>plus</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>false</ID>
          <ToolTip>false</ToolTip>
          <Default>false</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>plu</ID>
          <ToolTip>plu</ToolTip>
          <Default>plu</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>pl</ID>
          <ToolTip>pl</ToolTip>
          <Default>pl</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>p</ID>
          <ToolTip>p</ToolTip>
          <Default>p</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>M</ID>
          <ToolTip>M</ToolTip>
          <Default>M</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>MO</ID>
          <ToolTip>MO</ToolTip>
          <Default>MO</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>MOp</ID>
          <ToolTip>MOp</ToolTip>
          <Default>MOp</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>MMOp</ID>
          <ToolTip>MMOp</ToolTip>
          <Default>MMOp</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>m</ID>
          <ToolTip>m</ToolTip>
          <Default>m</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>mm</ID>
          <ToolTip>mm</ToolTip>
          <Default>mm</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>mmo</ID>
          <ToolTip>mmo</ToolTip>
          <Default>mmo</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>mmop</ID>
          <ToolTip>mmop</ToolTip>
          <Default>mmop</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>ma</ID>
          <ToolTip>ma</ToolTip>
          <Default>ma</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>mao</ID>
          <ToolTip>mao</ToolTip>
          <Default>mao</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>maop</ID>
          <ToolTip>maop</ToolTip>
          <Default>maop</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>aaop</ID>
          <ToolTip>aaop</ToolTip>
          <Default>aaop</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>in</ID>
          <ToolTip>in</ToolTip>
          <Default>in</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>i</ID>
          <ToolTip>i</ToolTip>
          <Default>i</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>fals</ID>
          <ToolTip>fals</ToolTip>
          <Default>fals</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>fal</ID>
          <ToolTip>fal</ToolTip>
          <Default>fal</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>fa</ID>
          <ToolTip>fa</ToolTip>
          <Default>fa</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>f</ID>
          <ToolTip>f</ToolTip>
          <Default>f</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>b</ID>
          <ToolTip>b</ToolTip>
          <Default>b</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>bo</ID>
          <ToolTip>bo</ToolTip>
          <Default>bo</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>boo</ID>
          <ToolTip>boo</ToolTip>
          <Default>boo</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="cpp" Delimiter="$"><![CDATA[struct M {
	long long s[2] = {};
	int count[2] = {};
};
struct MMop {
	M operator()(M a, M b)
	{
		return M {
			{a.s[0] + b.s[0] + (long long)a.count[1] * b.count[0], a.s[1] + b.s[1] + (long long)a.count[0] * b.count[1]},
			{a.count[0] + b.count[0], a.count[1] + b.count[1]}};
	}
};
struct AltInfo {
	bool v = false;
	bool operator==(const AltInfo &rhs) const
	{
		return v == rhs.v;
	}
};
struct MAop {
	M operator()(M m, AltInfo a)
	{
		if (a.v) {
			return M {{m.s[1], m.s[0]}, {m.count[1], m.count[0]}};
		} else {
			return m;
		}
	}
};
struct AAop {
	AltInfo operator()(AltInfo existing, AltInfo applying)
	{
		return AltInfo {bit_xor<bool>()(existing.v, applying.v)};
	}
};
AVLTree<
	/*Key*/int, /*Monoid*/M, /*IDENT*/M, /*Op*/MMop,
	/*LAZY*/true, /*AlterInfo*/AltInfo, /*AIDENT*/AltInfo,
	/*MAOp*/MAop, /*AAOp*/AAop
> tree;
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>